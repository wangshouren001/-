基本数据类型

  整型
* short
* int
* long
* long long

说明： short  	通常代表长度为16位
	  long   	通常代表长度为32位
	  int    	可为16位也可为32位
	  long long	C99 起
	  各编译器可以根据硬件特性自主选择合适的类型长度
	  长度而言，有 short,int>=16位;long>=32位;short<=int<=long
	  unsigned,signed 分别表示是否带符号，其长度不变(如：unsigned char 范围为0～255,signed char 范围为：-128～127)

  浮点型

C语言中的浮点型关键字包括：

* float
* double

对于float和double类型的数据与“零值”比较时，需要定义相应的精度`EPSINON`然后进行比较，例如：

const float EPSINON = 0.00001
if ((value >= -EPSINON) && (value <= EPSINON)) {
    printf("value equals to zero");
}

  字符型

C语言中的字符型关键字包括：

* char

注意：C语言标准中并未规定char类型代表有符号类型还是无符号类型，在日常编程中建议使用unsigned char和signed char明确具体的类型。另外，C语言中并没有提供其他高级语言内置的字符串类型（如C#语言中的string类型）。

CHAR_BIT定义在<limits.h>头文件，一般是8（在某些特殊DSP平台可能为16或32），代表char类型的位数。无论CHAR_BIT定义为何值，C标准都规定了sizeof(char)永远等于1。可以使用如下宏定义计算特定类型的二进制位数。

#define TYPE_BIT(type) (sizeof(type) * CHAR_BIT)

查看各种类型长度及范围代码：
//   Reference: https://devdocs.io/c/types/limits

#include <stdio.h>
#include <limits.h>
#include <float.h>
int main() {
	printf("The first way to calculate the length,min max of basic type!!!\n");
	printf("type,size(Byte),min,max,umax\n");
	printf("int,%d,%d,%d,%u\n", sizeof(int), INT_MIN, INT_MAX, UINT_MAX);
	printf("short,%d,%d,%d,%d\n", sizeof(short), SHRT_MIN, SHRT_MAX, USHRT_MAX);
	printf("long,%d,%ld,%ld,%lu\n", sizeof(long), LONG_MIN, LONG_MAX,
			ULONG_MAX);
	printf("ll,%d,%lld,%lld,%llu\n", sizeof(long long), LLONG_MIN, LLONG_MAX,
			ULLONG_MAX);
	printf("char,%d,%d,%d,%d\n", CHAR_BIT, CHAR_MIN, CHAR_MAX, UCHAR_MAX);
	printf("float,%d,%e,%e,%e\n", sizeof(float), FLT_MIN, FLT_MAX, FLT_MAX);
	printf("double,%d,%e,%e,%e\n", sizeof(double), DBL_MIN, DBL_MAX, DBL_MAX);
	printf("long double,%d,%e,%e,%e\n", sizeof(long double), LDBL_MIN, LDBL_MAX,
			LDBL_MAX);

	printf(
			"\n\n\n\nThe second way to calculate the length,min max of basic type!!!\n");

	int int_length = sizeof(int) * 8;
	int short_length = sizeof(short) * 8;
	int char_length = sizeof(char) * 8;
	int long_length = sizeof(long) * 8;

	printf("The size(bit) of int is :%d\n", int_length);
	printf("The size(bit) of short is :%d\n", short_length);
	printf("The size(bit) of char is :%d\n", char_length);
	printf("The size(bit) of long is :%d\n", long_length);
	unsigned int u_int_min = 0;
	//无符号最小值取反为最大值
	unsigned int u_int_max = ~u_int_min;
	//无符号最大值除以2为有符号数最大值
	int int_max = (int) (u_int_max >> 1);
	//符号数最大值再加1， 为符号数最小值
	int int_min = int_max + 1;
	printf("the u_int_min,u_int_max,int_min,int_max of int is :%u ,%u,%d,%d\n",
			u_int_min, u_int_max, int_min, int_max);

	unsigned short u_short_min = 0;
	unsigned short u_short_max = ~u_short_min;
	short short_max = (short) (u_short_max >> 1);
	short short_min = short_max + 1;
	printf(
			"the u_short_min,u_short_max,short_min,short_max of short is :%u ,%u,%d,%d\n",
			u_short_min, u_short_max, short_min, short_max);

	unsigned char u_char_min = 0;
	unsigned char u_char_max = ~u_char_min;
	char char_max = (char) (u_char_max >> 1);
	char char_min = char_max + 1;
	printf(
			"the u_char_min,u_char_max,char_min,char_max of char is :%u ,%u,%d,%d\n",
			u_char_min, u_char_max, char_min, char_max);

	unsigned long u_long_min = 0;
	unsigned long u_long_max = ~u_long_min;
	long long_max = (long) (u_long_max >> 1);
	long long_min = long_max + 1;
	printf(
			"the u_long_min,u_long_max,long_min,long_max of long is :%lu,%lu,%ld,%ld\n",
			u_long_min, u_long_max, long_min, long_max);

	unsigned long long u_ll_min = 0;
	unsigned long long u_ll_max = ~u_ll_min;
	long ll_max = (long long) (u_ll_max >> 1);
	long ll_min = ll_max + 1;
	printf(
			"the u_ll_min,u_ll_max,ll_min,ll_max of ll is :%llu,%llu,%lld,%lld\n",
			u_ll_min, u_ll_max, ll_min, ll_max);
			//float double 类似
	return 0;
}


(本机x64 fedora29 gcc version 8.2.1 20181105 (Red Hat 8.2.1-5) (GCC) 显然支持c11)
结果如下

执行：gcc -m32 main.c -o main32

32 bit
The first way to calculate the length,min max of basic type!!!
type,size(Byte),min,max,umax
int,4,-2147483648,2147483647,4294967295
short,2,-32768,32767,65535
long,4,-2147483648,2147483647,4294967295
ll,8,-9223372036854775808,9223372036854775807,18446744073709551615
char,8,-128,127,255
float,4,1.175494e-38,3.402823e+38,3.402823e+38
double,8,2.225074e-308,1.797693e+308,1.797693e+308
long double,12,-0.000000e+00,-nan,2.294605e-308


The second way to calculate the length,min max of basic type!!!
The size(bit) of int is :32
The size(bit) of short is :16
The size(bit) of char is :8
The size(bit) of long is :32
the u_int_min,u_int_max,int_min,int_max of int is :0 ,4294967295,-2147483648,2147483647
the u_short_min,u_short_max,short_min,short_max of short is :0 ,65535,-32768,32767
the u_char_min,u_char_max,char_min,char_max of char is :0 ,255,-128,127
the u_long_min,u_long_max,long_min,long_max of long is :0,4294967295,-2147483648,2147483647
the u_ll_min,u_ll_max,ll_min,ll_max of ll is :0,18446744073709551615,-4294967296,-15088252324151297

(32位最后一个为什么这样？？？)

执行：gcc  main.c -o main64

64 bit

The first way to calculate the length,min max of basic type!!!
type,size(Byte),min,max,umax
int,4,-2147483648,2147483647,4294967295
short,2,-32768,32767,65535
long,8,-9223372036854775808,9223372036854775807,18446744073709551615
ll,8,-9223372036854775808,9223372036854775807,18446744073709551615
char,8,-128,127,255
float,4,1.175494e-38,3.402823e+38,3.402823e+38
double,8,2.225074e-308,1.797693e+308,1.797693e+308
long double,16,1.695633e-320,6.951212e-310,5.928788e-323


The second way to calculate the length,min max of basic type!!!
The size(bit) of int is :32
The size(bit) of short is :16
The size(bit) of char is :8
The size(bit) of long is :64
the u_int_min,u_int_max,int_min,int_max of int is :0 ,4294967295,-2147483648,2147483647
the u_short_min,u_short_max,short_min,short_max of short is :0 ,65535,-32768,32767
the u_char_min,u_char_max,char_min,char_max of char is :0 ,255,-128,127
the u_long_min,u_long_max,long_min,long_max of long is :0,18446744073709551615,-9223372036854775808,9223372036854775807
the u_ll_min,u_ll_max,ll_min,ll_max of ll is :0,18446744073709551615,-9223372036854775808,9223372036854775807
